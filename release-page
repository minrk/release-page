#!/usr/bin/env python
"""
release-page service

edit repo list in release-page.yml to create your own page.
"""
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, tzinfo, timedelta
import os
import re

import git
from github import Github as GitHub # H!
import yaml

# webapp
import jinja2
from tornado.httpserver import HTTPServer
from tornado.gen import coroutine
from tornado.log import app_log
from tornado.ioloop import IOLoop, PeriodicCallback
from tornado.web import RequestHandler, Application

join = os.path.join

cfg_file = 'release-page.yml'

# regex for `git-describe`
describe_pat = re.compile(r'(.*?)(\-(\d+)\-g([0-9a-f]+))?$')

def repo_name(repo):
    "/path/to/jupyter/foo/.git => jupyter/foo"
    return '/'.join(repo.git_dir.split('/')[-3:-1])

def ref_name(ref):
    "origin/master => master"
    return ref.name.split('/', 1)[1]

class _tz_dict(dict):
    """A defaultdict containing datetime tzinfo objects from integer-second offsets."""
    def __getitem__(self, offset):
        if offset not in self:
            aoffset = abs(offset)
            h = aoffset // 3600
            m = (aoffset % 3600) // 60
            # this is backwards because tzoffset is the reverse of tz representation
            s = '+' if offset <= 0 else '-'
            class TZ(tzinfo):
                def __repr__(self):
                    return "TZ(%s%02i:%02i)" % (s, h, m)
                
                def utcoffset(self, dt):
                    return timedelta(seconds=offset)
                
                def dst(self, dt):
                    return timedelta(minutes=0)
            self[offset] = TZ()
        return super().__getitem__(offset)

_tzinfos = _tz_dict()

def utcnow():
    return datetime.utcnow().replace(tzinfo=_tzinfos[0])

def commit_date(commit):
    """Return tz-aware datetime object from commit"""
    tz = _tzinfos[commit.author_tz_offset]
    return datetime.fromtimestamp(commit.authored_date, tz)

tfmt = "%Y-%m-%d %H:%M:%S %z"

def dirty(repo, ref, tag, commits):
    """Produce report dict for dirty branch"""
    td = commit_date(tag.commit)
    ref_date = commit_date(ref.commit)
    return {
        'repo': repo_name(repo),
        'ref': ref_name(ref),
        'commits': commits,
        'tag': tag.name,
        'tag_date': td,
        'ref_date': ref_date,
        'days': (ref_date - td).days
    }

def clean(repo, ref, tag):
    """Produce report dict for a branch that has been released."""
    td = commit_date(tag.commit)
    return {
        'repo': repo_name(repo),
        'ref': ref_name(ref),
        'commits': 0,
        'tag': tag.name,
        'tag_date': td,
        'ref_date': td,
        'days': 0,
    }

def format_date(dt):
    """Simple short date format"""
    now = utcnow()
    today = now.date()
    date = dt.date()
    delta = now - dt
    day_delta = today - date
    days = day_delta.days
    seconds = delta.total_seconds()
    if dt > now:
        print("???Future: %s, %s???" % (dt, now))
        return "In the future somehow"
    if dt + timedelta(minutes=9) >= now:
        return "just now"
    elif dt + timedelta(minutes=90) >= now:
        return "%i minutes ago" % (seconds // 60)
    elif date == today:
        return "today"
    elif date + timedelta(days=1) == today:
        return "yesterday"
    elif date + timedelta(days=14) >= today:
        return "%i days ago" % days
    elif date + timedelta(days=60) >= today:
        return "%i weeks ago" % (days // 7)
    elif date + timedelta(days=700) >= today:
        return "%i months ago" % (days // 30)
    else:
        return "%i years ago" % ((days + 150) // 365)


def summarize_branch(repo, ref):
    """Summarize a branch of a repo"""
    app_log.info("Summarizing %s:%s" % (repo_name(repo), ref_name(ref)))
    try:
        desc = repo.git.describe(ref, '--tags', '--abbrev=99')
    except git.GitCommandError as e:
        # never released
        return None
    match = describe_pat.match(desc)
    name = ref.name.split('/', 1)[1]
    tagname = match.group(1)
    tag = repo.tags[tagname]
    scommits = match.group(3)
    ncommits = 0 if scommits is None else int(scommits)
    if ncommits <= 1:
        # assume 1 commit is back-to-dev version bump, treat it as clean
        return clean(repo, ref, tag)
    else:
        return dirty(repo, ref, tag, ncommits)


def summary(project, workdir):
    """Get the summary of a project on GitHub
    
    Parameters
    ----------
    
    project: 'org/repo' string
    
    Returns
    -------
    
    list of dicts summarizing the state of each branch.
    """
    url = 'https://github.com/%s' % project
    path = join(workdir, project)
    if not os.path.exists(path):
        app_log.info("Cloning %s to %s" % (url, path))
        r = git.Repo.clone_from(url, path)
    else:
        r = git.Repo(path)
        app_log.info("Updating %s" % (path))
        r.remote().fetch()
    infos = []
    # prune deleted remote branches
    r.git.remote('prune', *r.remotes)
    for ref in r.remote().refs:
        if ref.name.endswith(('/HEAD', '/gh-pages')):
            continue
        info = summarize_branch(r, ref)
        if not info:
            app_log.warn("No info for %s:%s", repo_name(r), ref_name(ref))
        else:
            infos.append(info)
    infos = sorted(infos, key=lambda info: info['ref_date'], reverse=True)
    if not infos:
        app_log.warning("No releases for %s", project)
    return infos


class ReleaseChecker(object):
    def __init__(self, *, workdir='/tmp/release-page', orgs=None, exclude_repos=None, repos=None):
        self.workdir = workdir
        self.orgs = orgs or []
        self.exclude_repos = exclude_repos or []
        self.repos = repos or []

        self.gh = GitHub(os.getenv('GITHUB_API_TOKEN'))
        self.executor = ThreadPoolExecutor(2)
        self.data = {
            'projects': {},
            'date': utcnow(),
        }

    def _update_repo_list(self):
        for org in map(self.gh.get_organization, self.orgs):
            app_log.info("Updating repo list for %s", org.login)
            for repo in org.get_repos():
                if repo.full_name in self.repos + self.exclude_repos:
                    app_log.debug("Skipping excluded repo %s", repo.full_name)
                    continue
                else:
                    app_log.debug("Checking for tags in %s", repo.full_name)
                    # check for tags
                    try:
                        next(iter(repo.get_tags()))
                    except StopIteration:
                        app_log.info("No tags in %s", repo.full_name)
                        self.exclude_repos.append(repo.full_name)
                    else:
                        app_log.info("Adding %s to repo list", repo.full_name)
                        self.repos.append(repo.full_name)

    @coroutine
    def update_repo_list(self):
        app_log.info("Updating repo list (rate limit: %i/%i)", *self.gh.rate_limiting)
        yield self.executor.submit(self._update_repo_list)
        app_log.info("Repo list updated (rate limit %i/%i)", *self.gh.rate_limiting)

    def _update(self):
        for name in list(self.repos):
            self.data['projects'][name] = summary(name, self.workdir)

    @coroutine
    def update(self):
        app_log.info("Updating data")
        yield self.executor.submit(self._update)
        app_log.info("Data updated")
        self.data['date'] = utcnow()


class RenderHandler(RequestHandler):
    """Handler for rendering summary of form info as a page."""
    def initialize(self, data, env):
        self.data = data
        self.env = env
    
    def get(self):
        template = self.env.get_template('release.html')
        def sort_key(item):
            if not item[1]: # no releases
                return -1
            return max(info['commits'] for info in item[1])

        repos = sorted(
            [ (name, branches) for name, branches in self.data['projects'].items() ],
            key=sort_key,
            reverse=True,
        )
        html = template.render(repos=repos, date=format_date(data['date']))
        self.finish(html)

if __name__ == '__main__':
    from tornado.options import define, options, parse_command_line
    define("port", default=8888, help="run on the given port", type=int)
    define("interval", default=3600, help="interval (seconds) to refresh", type=int)
    define("github-interval", default=24 * 3600, help="interval (seconds) to refresh repo list from GitHub", type=int)
    define("workdir", default='/tmp/release-page', help="path to clone repos", type=str)
    
    parse_command_line()
    
    with open(cfg_file) as f:
        cfg = yaml.load(f)

    checker = ReleaseChecker(workdir=options.workdir, **cfg)

    loader = jinja2.FileSystemLoader('.')
    env = jinja2.Environment(loader=loader, autoescape=True)
    env.filters['format_date'] = format_date

    data = checker.data

    loop = IOLoop.instance()
    # schedule initial data load
    @coroutine
    def first_load():
        # concurrent update & repo-list load,
        # so we can start cloning while we list repos on orgs
        futures = [ checker.update(), checker.update_repo_list() ]
        for f in futures:
            yield f
        # update repos one more time after loading the list
        yield checker.update()
    loop.add_callback(first_load)
    # and periodic updates
    PeriodicCallback(checker.update_repo_list, options.github_interval * 1e3).start()
    PeriodicCallback(checker.update, options.interval * 1e3).start()
    app = Application([
        ('/', RenderHandler, dict(data=data, env=env))
    ])
    server = HTTPServer(app)
    server.listen(options.port)
    app_log.info("Listening on :%i", options.port)
    loop.start()
